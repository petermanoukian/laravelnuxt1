{"file":"useSubcatpagination-6N8a4jLl.js","mappings":";;;;;;;;;;;;;;;;;;;;AAwCe,cAAW;AACZ,aAAU;AAExB,UAAM,YAAY,aAAc;AAOf,eAAY;AACd,qBAAkB,EAAC,OAAO;AAEzC,UAAM,UAAU,SAAS,MAAM,UAAU,QAAQ,UAAU,KAAK,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChD5E,UAAM,SAAS,iBAAkB;AAGjC,UAAM,QAAQ;AA2Bd,UAAM,MAAM,MAAM,SAAS,CAAC,eAAe;AACzC,cAAQ,IAAI,sBAAsB,UAAU;AAAA,IAC9C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AClCM,SAAS,sBAAsB;AACpC,QAAM,EAAE,KAAM,IAAG,WAAY;AAC7B,QAAM,SAAS,mBAAmB,OAAO;AAEzC,QAAM,UAAU,IAAI,EAAE;AACtB,QAAM,cAAc,IAAI,CAAC;AACzB,QAAM,WAAW,IAAI,CAAC;AACtB,QAAM,UAAU,IAAI,CAAC;AACrB,QAAM,eAAe,IAAI,CAAC;AAE1B,QAAM,eAAe,OAAO,QAAQ,MAAM,OAAO,MAAM;AAErD,QAAI;AAEN,YAAM,SAAS;AAAA,QACd;AAAA,QACA,UAAU,QAAQ;AAAA,MAChB;AAGH,UAAI,OAAO;AACV,eAAO,QAAQ;AACf,gBAAQ;AAAA,MACR;AAEA,gBAAO;AAER,UAAI,WAAW;AACf,UAAI,QAAQ,GAAG;AACb,mBAAW,MAAM,KAAK,IAAI,GAAG,MAAM,sBAAsB,KAAK,IAAI,EAAE,QAAQ;AAAA,MAC7E,OAGD;AACC,mBAAW,MAAM,KAAK,IAAI,GAAG,MAAM,sBAAsB,EAAE,QAAQ;AAAA,MACnE;AAGD,cAAQ,QAAQ,SAAS,KAAK,QAAQ;AACtC,kBAAY,QAAQ,SAAS,KAAK,QAAQ;AAC1C,eAAS,QAAQ,SAAS,KAAK,QAAQ;AACvC,mBAAa,QAAQ,SAAS,KAAK,QAAQ;AAAA,IACxC,SACG,OACP;AACK,cAAQ,MAAM,iCAAiC,MAAM,WAAW,MAAM,SAAS,OAAO,MAAM,OAAO;AAAA,IACpG;AAAA,EACF;AAED,QAAM,aAAa,CAAC,QAAQ,MAAK,SAAS;AAExC,QAAI,OAAO,KAAK,QAAQ,SAAS,OAAO;AACtC,mBAAa,OAAO,IAAI;AAAA,IACzB;AAAA,EACF;AAGD,QAAM,cAAc,SAAS,MAAM;AACjC,QAAI,QAAQ,CAAE;AACd,aAAS,IAAI,GAAG,KAAK,SAAS,OAAO,KAAK;AACxC,YAAM,KAAK,CAAC;AAAA,IACb;AACD,WAAO;AAAA,EACX,CAAG;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EACD;AACH;","names":[],"sources":["../../../../components/SubCatSingleAdmin.vue","../../../../components/SubcatsAdmin.vue","../../../../composables/useSubcatpagination.js"],"sourcesContent":["<!-- CatSingleAdmin.vue -->\r\n<template>\r\n<div class=\"p-2 border rounded\">\r\n\t\t\t  <NuxtLink :to=\"`/admin/subcat/detail/${subcat.id}`\" > &rsaquo; {{ subcat.name }} </NuxtLink> \r\n\t\t  <p> Category : {{ subcat.cat.name }} </p>\r\n\t\t  <p v-if=\"subcat.img\">\r\n\t\t\t  <NuxtLink :to=\"`/admin/subcat/detail/${subcat.id}`\" >\r\n\t\t      <img :src=\"`${config.public.BaseUrl}/images/subcat/thumb/${subcat.img}`\"\r\n\t\t\t  :alt=\"subcat.name\" class=\"mt-2 mb-2 w-32 h-32\"/>\r\n\t\t\t  </NuxtLink>  \r\n\t\t  </p> \r\n\t\t  <p v-else>\r\n\t\t    <NuxtLink :to=\"`/admin/subcat/detail/${subcat.id}`\" >\r\n\t\t  \t\t<img src=\"~/assets/default/1.jpg\" alt=\"Default Picture\" class=\"mt-2 mb-2 w-32 h-32\"/>\r\n\t\t\t</NuxtLink> \r\n\t\t  </p> \r\n\t\t  <p> <NuxtLink :to=\"`/admin/subcat/edit/${subcat.id}`\" > &rsaquo; Edit </NuxtLink> </p>\r\n\t\t  <p>\r\n\t\t   <NuxtLink :to=\"`/admin/prod/addprodbycatidsubid/${subcat.catid}/${subcat.id}`\" > &rsaquo; Add Products</NuxtLink>\r\n\t\t  </p>  \r\n\t\t  <p>\r\n\t\t   <NuxtLink :to=\"`/admin/prod/viewprodbycatidsubid/${subcat.catid}/${subcat.id}`\" > &rsaquo; View Products\r\n\t\t   ( {{ subcat.prods_count }} )\r\n\t\t   </NuxtLink>\r\n\t\t  </p>\r\n\t\t  <p v-if=\"isAdmin\">\r\n\t\t\t<button class ='buttonwhite margintop5' @click=\"confirmDelete(subcat.id)\">\r\n\t\t\t  &rsaquo; Delete SubCategory\r\n\t\t\t</button>\r\n\t\t  </p>\r\n\t\r\n</div>  \r\n</template>\r\n\r\n<script setup>\r\nimport { useAuthStore } from '~/stores/auth'\r\nimport { ref, onMounted, watch, computed } from 'vue'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { useRuntimeConfig } from '#imports'\r\n\r\nconst router = useRouter()\r\nconst route = useRoute()\r\n\r\nconst authStore = useAuthStore()\r\nonMounted(async () => {\r\n  await authStore.fetchUser()\r\n})\r\nimport { defineProps } from 'vue'\r\n\r\n//const config = useRuntimeConfig()\r\nconst { $api } = useNuxtApp()\r\nconst apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\nconst isAdmin = computed(() => authStore.user && authStore.user.levell === 1)\r\n\r\nconst props = defineProps({\r\n  subcat: {\r\n    type: Object,\r\n    required: true\r\n  },\r\n  config: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n})\r\n\r\nconst confirmDelete = async (Id) => {\r\n  const confirmed = confirm('Are you sure you want to delete this subcategory?')\r\n  \r\n  if (confirmed) \r\n  {\r\n    try \r\n\t{\r\n      await $api.delete(`/admin/deletesubcat/${Id}`)\r\n      \r\n      router.push('/admin/subcat/viewsubcat?message=deleted')\r\n    } \r\n\tcatch (error) \r\n\t{\r\n      console.error('Error deleting category:', error.response ? error.response.data : error.message)\r\n      alert('Failed to delete.')\r\n    }\r\n  }\r\n}\r\n\r\n\r\n</script>\r\n","<!-- components/Subat.vue -->\r\n<script setup>\r\nimport { ref, onMounted, watch, computed } from 'vue'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { useRuntimeConfig } from '#imports'\r\nconst config = useRuntimeConfig()\r\nimport { defineProps } from 'vue';\r\n\r\nconst props = defineProps({\r\n  subcats: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  currentPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  pageNumbers: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  lastPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  changePage: {\r\n    type: Function,\r\n    required: true\r\n  },\r\n  catid: {\r\n    type: Number,\r\n    required: false\r\n  },\r\n})\r\n\r\nwatch(() => props.subcats, (newSubcats) => {\r\n  console.log('Items updated now:', newSubcats);\r\n})\r\n</script>\r\n<template>\r\n\t<div class=\"w-full mt-8 mb-8\">\r\n\t  <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-2\"> \r\n\t \r\n\t \r\n\t \r\n\t \t\t<SubCatSingleAdmin\r\n\t\t\t  v-for=\"subcat in subcats\"\r\n\t\t\t  :key=\"subcat.id\"\r\n\t\t\t  :subcat=\"subcat\"\r\n\t\t\t  :config=\"config\"\r\n\t\t\t/>\r\n\t \r\n\t \r\n\r\n\t\t\r\n\t\t\r\n\t  </div>\r\n\t</div>\r\n\t<div class=\" bg-gray-100 fullwidth margintopbottom8 pagination\"> catid : {{ catid }}\r\n\t  <button @click=\"changePage(catid,currentPage - 1)\" :disabled=\"currentPage === 1\" \r\n\t  :class=\"['marginleft5 pager pagerwide', { red: currentPage === 1 , active: currentPage === 1 }]\"> << Previous</button>\r\n\t  <span v-for=\"page in pageNumbers\" :key=\"page\"  class='marginleft5'>\r\n        <button @click=\"changePage(catid,page)\" \r\n\t\t:class=\"['marginleft5 pager', { red: page === currentPage, active: page === currentPage }]\" \r\n\t\t:disabled=\"page === currentPage\">{{ page }}</button>\r\n      </span>\r\n\t  <button @click=\"changePage(catid,currentPage + 1)\" :disabled=\"currentPage === lastPage\" \r\n\t  :class=\"['marginleft5 pager pagerwide', { red: currentPage === lastPage , active: currentPage === lastPage }]\"> >> Next</button>\r\n      <span class='marginleft5'>Page {{ currentPage }} of {{ lastPage }}</span> \r\n\t</div>\t\r\n</template>","import { ref, computed } from 'vue'\r\nimport { useRuntimeConfig, useNuxtApp } from '#imports'\r\n\r\nexport function useSubcatPagination() {\r\n  const { $api } = useNuxtApp()\r\n  const apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\n  const subcats = ref([])\r\n  const currentPage = ref(1)\r\n  const lastPage = ref(1)\r\n  const perPage = ref(8)\r\n  const totalSubcats = ref(0)\r\n\r\n  const fetchSubcats = async (catid = null, page = 1) => {\r\n\t  \r\n    try {\r\n\r\n\t\tconst params = {\r\n\t\t\tpage: page,\r\n\t\t\tper_page: perPage.value\r\n\t\t  }\r\n\r\n\t\t  // Include catid if provided\r\n\t\tif (catid) {\r\n\t\t\tparams.catid = catid\r\n\t\t\tcatid = catid\r\n\t\t}\r\n\t\telse\r\n\t\t\tcatid =''\r\n\r\n\t\tlet response = ''\r\n\t\tif (catid > 0) {\r\n\t\t  response = await $api.get(`${apiUrl}/admin/subcat/view/${catid}`, { params })\r\n\t\t}\r\n\r\n\t\telse\r\n\t\t{\r\n\t\t\tresponse = await $api.get(`${apiUrl}/admin/subcat/view`, { params })\r\n\t\t}\r\n\r\n\r\n\t\tsubcats.value = response.data.subcats.data\r\n\t\tcurrentPage.value = response.data.subcats.current_page\r\n\t\tlastPage.value = response.data.subcats.last_page\r\n\t\ttotalSubcats.value = response.data.subcats.total\r\n    } \r\n\tcatch (error) \r\n\t{\r\n      console.error('Error fetching subcategories:', error.response ? error.response.data : error.message)\r\n    }\r\n  }\r\n\r\n  const changePage = (catid = null,page) => {\r\n\t\r\n    if (page > 0 && page <= lastPage.value) {\r\n      fetchSubcats(catid, page) // Pass catid if needed\r\n    }\r\n  }\r\n\r\n  // Computed property for page numbers\r\n  const pageNumbers = computed(() => {\r\n    let pages = []\r\n    for (let i = 1; i <= lastPage.value; i++) {\r\n      pages.push(i)\r\n    }\r\n    return pages\r\n  })\r\n\r\n  return {\r\n    subcats,\r\n    currentPage,\r\n    lastPage,\r\n    perPage,\r\n    totalSubcats,\r\n    fetchSubcats,\r\n    changePage,\r\n    pageNumbers,  // Return page numbers\r\n  }\r\n}\r\n"],"version":3}