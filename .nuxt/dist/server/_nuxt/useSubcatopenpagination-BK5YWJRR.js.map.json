{"file":"useSubcatopenpagination-BK5YWJRR.js","mappings":"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","names":["_sfc_main","_ssrRenderAttrs","_mergeProps","_ssrRenderComponent","_withCtx","_push","_parent","_ssrInterpolate","_createTextVNode","_toDisplayString","_ssrRenderAttr","_createVNode"],"sources":["../../../../components/SubCatSingleOpen.vue","../../../../components/SubcatsOpen.vue","../../../../composables/useCatopenpagination.js","../../../../composables/useSubcatopenpagination.js"],"sourcesContent":["<!-- SubCatSingleOpen.vue -->\r\n<template>\r\n\t<div  class=\"mt-1 mb-1 col-lg-4 col-sm-6 wow fadeInUp \"> \r\n\t\t<div class= 'graybox'>\r\n\t\t\t<p> Category : <NuxtLink :to=\"`/prod/viewprodbycatid/${subcat.catid}`\" > {{ subcat.cat.name }} </NuxtLink>  </p>\r\n\t\t\t<p v-if=\"subcat.img\">\r\n\t\t\t\t<NuxtLink :to=\"`/prod/viewprodbycatsub/${subcat.catid}/${subcat.id}`\" >\r\n\t\t\t\t<img :src=\"`${config.public.BaseUrl}/images/subcat/thumb/${subcat.img}`\"\r\n\t\t\t\t:alt=\"subcat.name\" class=\"mt-1 mb-1 maximg link1 h-32\"/>\r\n\t\t\t\t</NuxtLink>  \r\n\t\t\t</p>   \r\n\t\t\t<p v-else>\r\n\t\t\t\t<NuxtLink :to=\"`/prod/viewprodbycatsub/${subcat.catid}/${subcat.id}`\" >\r\n\t\t\t\t<img src=\"~/assets/default/1.jpg\" alt=\"Default Picture\" class=\"mt-1 mb-1  h-32 link1\"/>\r\n\t\t\t\t</NuxtLink> \r\n\t\t\t</p> \r\n\t\t\t<p>\t\t\r\n\t\t\t\t<NuxtLink :to=\"`/prod/viewprodbycatsub/${subcat.catid}/${subcat.id}`\" class='link1'> <b>&rsaquo; {{ subcat.name }} </b></NuxtLink> \r\n\t\t\t</p>\r\n\t\t</div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    subcat: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    config: {\r\n      type: Object,\r\n      required: true\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<!-- components/SubcatsOpen.vue -->\r\n<script setup>\r\nimport { ref, onMounted, watch, computed } from 'vue'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { useRuntimeConfig } from '#imports'\r\nconst config = useRuntimeConfig()\r\nimport { defineProps } from 'vue';\r\n\r\nconst props = defineProps({\r\n  subcats: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  currentPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  pageNumbers: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  lastPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  changePage: {\r\n    type: Function,\r\n    required: true\r\n  },\r\n  catid: {\r\n    type: Number,\r\n    required: false\r\n  },\r\n})\r\n\r\nwatch(() => props.subcats, (newSubcats) => {\r\n  console.log('Items updated now:', newSubcats);\r\n})\r\n</script>\r\n<template>\r\n\t<div class=\" fullwidth row mt-8 mb-8\"> \t\r\n\t\t<template v-for=\"(subcat, index) in subcats\" :key=\"subcat.id\">\r\n\t\t<SubCatSingleOpen\r\n\t\t  :subcat=\"subcat\"\r\n\t\t  :catid=\"catid\"\r\n\t\t  :config=\"config\" \r\n\t\t/>\r\n\t\t\r\n\t\t<div v-if=\"(index + 1) % 3 === 0\" class=\"w-full\">\r\n\t\t  <hr class=\"my-4\"/> \r\n\t\t</div>\r\n\t\t</template>\r\n\t</div>\r\n\t\r\n  <Pagination\r\n    :currentPage=\"currentPage\"\r\n    :pageNumbers=\"pageNumbers\"\r\n    :lastPage=\"lastPage\"\r\n    :changePage=\"changePage\"\r\n    typ=\"subcatpaginater\"\r\n\t:catid=\"catid\"\r\n  />\r\n</template>","import { ref, computed } from 'vue'\r\nimport { useRuntimeConfig, useNuxtApp } from '#imports'\r\n\r\nexport function useCatopenPagination() {\r\n  const { $api } = useNuxtApp()\r\n  const apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\n  const cats = ref([])\r\n  const currentPage = ref(1)\r\n  const lastPage = ref(1)\r\n  const perPage = ref(12)\r\n  const totalCats = ref(0)\r\n  const loadingcats = ref(true) \r\n\r\n\r\n  const fetchCats = async (page = 1) => {\r\n    try {\r\n      const response = await $api.get(`${apiUrl}/cat/view?page=${page}&per_page=${perPage.value}`)\r\n      cats.value = response.data.data\r\n\t  \r\n      currentPage.value = response.data.current_page\r\n      lastPage.value = response.data.last_page\r\n      totalCats.value = response.data.total\r\n    } catch (error) {\r\n      console.error('Error fetching items:', error.response ? error.response.data : error.message)\r\n    }\r\n\t\r\n\tfinally {\r\n    loadingcats.value = false  // Set loading to false once data is fetched\r\n  }\r\n\t\r\n\t\r\n  }\r\n\r\n  const changePage = (page) => {\r\n    if (page > 0 && page <= lastPage.value) {\r\n      currentPage.value = page\r\n      fetchCats(page)\r\n    }\r\n  }\r\n\r\n  // Computed property for page numbers\r\n  const pageNumbers = computed(() => {\r\n    let pages = []\r\n    for (let i = 1; i <= lastPage.value; i++) {\r\n      pages.push(i)\r\n    }\r\n    return pages\r\n  })\r\n\r\n  return {\r\n    cats,\r\n    currentPage,\r\n    lastPage,\r\n    perPage,\r\n    totalCats,\r\n    fetchCats,\r\n    changePage,\r\n    pageNumbers,  \r\n\tloadingcats\r\n  }\r\n}\r\n\r\n","import { ref, computed } from 'vue'\r\nimport { useRuntimeConfig, useNuxtApp } from '#imports'\r\n\r\nexport function useSubcatopenpagination() {\r\n  const { $api } = useNuxtApp()\r\n  const apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\n  const subcats = ref([])\r\n  const currentPage = ref(1)\r\n  const lastPage = ref(1)\r\n  const perPage = ref(9)\r\n  const totalSubcats = ref(0)\r\n  const loadingsubcats = ref(true) \r\n  \r\n  \r\n  const fetchSubcats = async (catid = null, page = 1) => {\r\n\t  \r\n    try {\r\n      // Build the query parameters\r\n      const params = {\r\n        page: page,\r\n        per_page: perPage.value\r\n      }\r\n\t  let response = ''\r\n      // Include catid if provided\r\n      if (catid > 0) {\r\n        params.catid = catid\r\n\t\tcatid = catid\r\n\t\tresponse = await $api.get(`${apiUrl}/subcat/view/${catid}`, { params })\r\n      }\r\n\t  else\r\n\t  {\r\n\t\tcatid =''\r\n        response = await $api.get(`${apiUrl}/subcat/view`, { params })\r\n\t  }\r\n\t\tconsole.log('subcat response ' + response)\r\n      // Update the state with response data\r\n      subcats.value = response.data.subcats.data\r\n\t  console.log('subcat response 2' + response.data.subcats.data)\r\n      currentPage.value = response.data.subcats.current_page\r\n      lastPage.value = response.data.subcats.last_page\r\n      totalSubcats.value = response.data.subcats.total\r\n    } \r\n\tcatch (error) \r\n\t{\r\n      console.error('Error fetching subcategories:', error.response ? error.response.data : error.message)\r\n    }\r\n\t\t\r\n\tfinally \r\n\t{\r\n\t\tloadingsubcats.value = false  // Set loading to false once data is fetched\r\n\t}\r\n\t\r\n\t\r\n\t\r\n  }\r\n\r\n  const changePage = (catid = null,page) => {\r\n\t\r\n    if (page > 0 && page <= lastPage.value) {\r\n      fetchSubcats(catid, page) // Pass catid if needed\r\n    }\r\n  }\r\n\r\n  // Computed property for page numbers\r\n  const pageNumbers = computed(() => {\r\n    let pages = []\r\n    for (let i = 1; i <= lastPage.value; i++) {\r\n      pages.push(i)\r\n    }\r\n    return pages\r\n  })\r\n\r\n  return {\r\n    subcats,\r\n    currentPage,\r\n    lastPage,\r\n    perPage,\r\n    totalSubcats,\r\n    fetchSubcats,\r\n    changePage,\r\n    pageNumbers,  \r\n\tloadingsubcats,\r\n  }\r\n}\r\n"],"version":3}