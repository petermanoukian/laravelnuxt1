{"version":3,"file":"useProdsearchopenpagination-B5R2kyEW.js","sources":["../../../../composables/useProdsearchopenpagination.js"],"sourcesContent":["import { ref, computed } from 'vue'\r\nimport { useRuntimeConfig, useNuxtApp } from '#imports'\r\n\r\nexport function useProdsearchopenpagination() {\r\n  const { $api } = useNuxtApp()\r\n  const apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\n  const prodsx = ref([])\r\n  const currentPagex = ref(1)\r\n  const lastPagex = ref(1)\r\n  const perPagex = ref(8)\r\n  const totalProdsx = ref(0)\r\n\r\n  const fetchsearchProds = async (searchx = '',catid = '', subid = '',page = 1) => {\r\n\t  \r\n    try {\r\n      // Build the query parameters\r\n      const params = {\r\n        page: page,\r\n        per_page: perPagex.value\r\n      }\r\n\r\n      // Include catid if provided\r\n\t  \r\n\t  if (searchx) \r\n\t  {\r\n        params.searchx = searchx\r\n\t\tsearchx = searchx\r\n      }\r\n\t  else\r\n\t\tsearchx =''\r\n\t  \r\n\t  \r\n      if (catid) \r\n\t  {\r\n        params.catid = catid\r\n\t\tcatid = catid\r\n      }\r\n\t  else\r\n\t\tcatid =''\r\n\t\r\n\t  if (subid) \r\n\t  {\r\n        params.subid = subid\r\n\t\tsubid = subid\r\n      }\r\n\t  else\r\n\t\tsubid =''\r\n\t\r\n\t\r\n      let response = await $api.get(`${apiUrl}/prod/search/${searchx}`, { params })\r\n\r\n      // Update the state with response data\r\n      prodsx.value = response.data.prods.data\r\n      currentPagex.value = response.data.prods.current_page\r\n      lastPagex.value = response.data.prods.last_page\r\n      totalProdsx.value = response.data.prods.total\r\n\t  console.log('Line 158 prodearch' + 'A ' + prodsx.value + ' B ' + response.data.prods.data)\r\n    } catch (error) {\r\n      console.error('Error fetching subcategories:', error.response ? error.response.data : error.message)\r\n    }\r\n  }\r\n\r\n  const changePagex = (searchx = null, catid = null,subid = null,page) => {\r\n\t\r\n    if (page > 0 && page <= lastPagex.value) {\r\n      fetchsearchProds(searchx, catid, subid, page) // Pass catid if needed\r\n    }\r\n  }\r\n\r\n  // Computed property for page numbers\r\n  const pageNumbersx = computed(() => {\r\n    let pages = []\r\n    for (let i = 1; i <= lastPagex.value; i++) {\r\n      pages.push(i)\r\n    }\r\n    return pages\r\n  })\r\n\r\n  return {\r\n    prodsx,\r\n    currentPagex,\r\n    lastPagex,\r\n    perPagex,\r\n    totalProdsx,\r\n    fetchsearchProds,\r\n    changePagex,\r\n    pageNumbersx,  // Return page numbers\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;AAGO,SAAS,8BAA8B;AAC5C,QAAM,EAAE,KAAM,IAAG,WAAY;AAC7B,QAAM,SAAS,mBAAmB,OAAO;AAEzC,QAAM,SAAS,IAAI,EAAE;AACrB,QAAM,eAAe,IAAI,CAAC;AAC1B,QAAM,YAAY,IAAI,CAAC;AACvB,QAAM,WAAW,IAAI,CAAC;AACtB,QAAM,cAAc,IAAI,CAAC;AAEzB,QAAM,mBAAmB,OAAO,UAAU,IAAG,QAAQ,IAAI,QAAQ,IAAG,OAAO,MAAM;AAE/E,QAAI;AAEF,YAAM,SAAS;AAAA,QACb;AAAA,QACA,UAAU,SAAS;AAAA,MACpB;AAIJ,UAAI,SACJ;AACK,eAAO,UAAU;AACvB,kBAAU;AAAA,MACL;AAEL,kBAAS;AAGL,UAAI,OACP;AACK,eAAO,QAAQ;AACrB,gBAAQ;AAAA,MACH;AAEL,gBAAO;AAEN,UAAI,OACJ;AACK,eAAO,QAAQ;AACrB,gBAAQ;AAAA,MACH;AAEL,gBAAO;AAGH,UAAI,WAAW,MAAM,KAAK,IAAI,GAAG,MAAM,gBAAgB,OAAO,IAAI,EAAE,OAAM,CAAE;AAG5E,aAAO,QAAQ,SAAS,KAAK,MAAM;AACnC,mBAAa,QAAQ,SAAS,KAAK,MAAM;AACzC,gBAAU,QAAQ,SAAS,KAAK,MAAM;AACtC,kBAAY,QAAQ,SAAS,KAAK,MAAM;AAC3C,cAAQ,IAAI,yBAA8B,OAAO,QAAQ,QAAQ,SAAS,KAAK,MAAM,IAAI;AAAA,IACvF,SAAQ,OAAO;AACd,cAAQ,MAAM,iCAAiC,MAAM,WAAW,MAAM,SAAS,OAAO,MAAM,OAAO;AAAA,IACpG;AAAA,EACF;AAED,QAAM,cAAc,CAAC,UAAU,MAAM,QAAQ,MAAK,QAAQ,MAAK,SAAS;AAEtE,QAAI,OAAO,KAAK,QAAQ,UAAU,OAAO;AACvC,uBAAiB,SAAS,OAAO,OAAO,IAAI;AAAA,IAC7C;AAAA,EACF;AAGD,QAAM,eAAe,SAAS,MAAM;AAClC,QAAI,QAAQ,CAAE;AACd,aAAS,IAAI,GAAG,KAAK,UAAU,OAAO,KAAK;AACzC,YAAM,KAAK,CAAC;AAAA,IACb;AACD,WAAO;AAAA,EACX,CAAG;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EACD;AACH;"}