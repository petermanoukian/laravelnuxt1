{"file":"useProdpagination-BE_nJY1T.js","mappings":";;;;;;;;;;;;;;;;;;;;AA2Ce,cAAW;AACZ,aAAU;AAExB,UAAM,YAAY,aAAc;AAOf,eAAY;AACd,qBAAkB,EAAC,OAAO;AAEzC,UAAM,UAAU,SAAS,MAAM,UAAU,QAAQ,UAAU,KAAK,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChD5E,UAAM,SAAS,iBAAkB;AAIjC,UAAM,QAAQ;AAkCd,UAAM,MAAM,MAAM,OAAO,CAAC,aAAa;AACrC,cAAQ,IAAI,sBAAsB,QAAQ;AAAA,IAC5C,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AC7CM,SAAS,oBAAoB;AAClC,QAAM,EAAE,KAAM,IAAG,WAAY;AAC7B,QAAM,SAAS,mBAAmB,OAAO;AAEzC,QAAM,QAAQ,IAAI,EAAE;AACpB,QAAM,cAAc,IAAI,CAAC;AACzB,QAAM,WAAW,IAAI,CAAC;AACtB,QAAM,UAAU,IAAI,CAAC;AACrB,QAAM,aAAa,IAAI,CAAC;AAExB,QAAM,aAAa,OAAO,QAAQ,IAAI,QAAQ,IAAG,OAAO,MAAM;AAE5D,QAAI;AAEF,YAAM,SAAS;AAAA,QACb;AAAA,QACA,UAAU,QAAQ;AAAA,MACnB;AAGD,UAAI,OACP;AACK,eAAO,QAAQ;AACrB,gBAAQ;AAAA,MACH;AAEL,gBAAO;AAEN,UAAI,OACJ;AACK,eAAO,QAAQ;AACrB,gBAAQ;AAAA,MACH;AAEL,gBAAO;AACN,UAAI,WAAW;AACf,UAAG,SAAQ,MAAM,SAAS,IAC1B;AACD,mBAAW,MAAM,KAAK,IAAI,GAAG,MAAM,oBAAoB,KAAK,IAAI,KAAK,IAAI,EAAE,OAAM,CAAE;AAAA,MACjF,WACO,SAAQ,MAAM,SAAS,IAC/B;AACD,mBAAW,MAAM,KAAK,IAAI,GAAG,MAAM,oBAAoB,KAAK,IAAI,EAAE,QAAQ;AAAA,MACxE,OAED;AACD,mBAAW,MAAM,KAAK,IAAI,GAAG,MAAM,oBAAoB,EAAE,QAAQ;AAAA,MAC/D;AAEE,YAAM,QAAQ,SAAS,KAAK,MAAM;AAClC,kBAAY,QAAQ,SAAS,KAAK,MAAM;AACxC,eAAS,QAAQ,SAAS,KAAK,MAAM;AACrC,iBAAW,QAAQ,SAAS,KAAK,MAAM;AAC1C,cAAQ,IAAI,wBAAwB,SAAS,KAAK,MAAM,IAAI;AAAA,IAC1D,SACG,OACP;AACK,cAAQ,MAAM,4BAA4B,MAAM,WAAW,MAAM,SAAS,OAAO,MAAM,OAAO;AAAA,IAC/F;AAAA,EACF;AAED,QAAM,aAAa,CAAC,QAAQ,MAAK,QAAQ,MAAK,SAAS;AAErD,QAAI,OAAO,KAAK,QAAQ,SAAS,OAAO;AACtC,iBAAW,OAAO,OAAO,IAAI;AAAA,IAC9B;AAAA,EACF;AAGD,QAAM,cAAc,SAAS,MAAM;AACjC,QAAI,QAAQ,CAAE;AACd,aAAS,IAAI,GAAG,KAAK,SAAS,OAAO,KAAK;AACxC,YAAM,KAAK,CAAC;AAAA,IACb;AACD,WAAO;AAAA,EACX,CAAG;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EACD;AACH;","names":[],"sources":["../../../../components/ProdAdminSingle.vue","../../../../components/ProdsAdmin.vue","../../../../composables/useProdpagination.js"],"sourcesContent":["<!-- ProdAdminSingle.vue -->\r\n<template>\r\n  <div class=\"p-2 border rounded\">\r\n  \r\n    <NuxtLink :to=\"`/admin/prod/detail/${prod.id}`\"> &rsaquo; {{ prod.name }} </NuxtLink>\r\n    <p> Category: {{ prod.cat.name }} </p>\r\n    <p> SubCategory: {{ prod.subcat.name }} </p>\r\n    <p v-if=\"prod.img\">\r\n      <NuxtLink :to=\"`/admin/prod/detail/${prod.id}`\">\r\n        <img :src=\"`${config.public.BaseUrl}/images/prod/thumb/${prod.img}`\" :alt=\"prod.name\" class=\"mt-2 mb-2 w-32 h-32\" />\r\n      </NuxtLink>\r\n    </p>\r\n    <p v-else>\r\n      <NuxtLink :to=\"`/admin/prod/detail/${prod.id}`\">\r\n        <img src=\"~/assets/default/1.jpg\" alt=\"Default Picture\" class=\"mt-2 mb-2 w-32 h-32\" />\r\n      </NuxtLink>\r\n    </p>\r\n    <p>\r\n      <NuxtLink :to=\"`/admin/prod/edit/${prod.id}`\"> &rsaquo; Edit </NuxtLink>\r\n    </p>\r\n    <p>\r\n      <NuxtLink :to=\"`/admin/prod/addprodbycatidsubid/${prod.catid}/${prod.subid}`\"> &rsaquo; Add By Cat/Subcategory</NuxtLink>\r\n    </p>\r\n    <p>\r\n      <NuxtLink :to=\"`/admin/prod/viewprodbycatidsubid/${prod.catid}/${prod.subid}`\"> &rsaquo; View  By Cat/Subcategory</NuxtLink>\r\n    </p>\r\n\t\r\n\t<p v-if=\"isAdmin\">\r\n\t\t<button class ='buttonwhite margintop5' @click=\"confirmDelete(prod.id)\">\r\n\t\t  &rsaquo; Delete \r\n\t\t</button>\r\n\t</p>\r\n\t\r\n\t\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useAuthStore } from '~/stores/auth'\r\nimport { ref, onMounted, watch, computed } from 'vue'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { useRuntimeConfig } from '#imports'\r\n\r\nconst router = useRouter()\r\nconst route = useRoute()\r\n\r\nconst authStore = useAuthStore()\r\nonMounted(async () => {\r\n  await authStore.fetchUser()\r\n})\r\nimport { defineProps } from 'vue'\r\n\r\n//const config = useRuntimeConfig()\r\nconst { $api } = useNuxtApp()\r\nconst apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\nconst isAdmin = computed(() => authStore.user && authStore.user.levell === 1)\r\n\r\n\r\nconst props = defineProps({\r\n  prod: {\r\n    type: Object,\r\n    required: true\r\n  },\r\n  config: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n})\r\n\r\nconst confirmDelete = async (Id) => {\r\n  const confirmed = confirm('Are you sure you want to delete this ')\r\n  \r\n  if (confirmed) \r\n  {\r\n    try \r\n\t{\r\n      await $api.delete(`/admin/deleteprod/${Id}`)\r\n      \r\n      router.push('/admin/prod/viewprod?message=deleted')\r\n    } \r\n\tcatch (error) \r\n\t{\r\n      console.error('Error deleting :', error.response ? error.response.data : error.message)\r\n      alert('Failed to delete.')\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<!-- components/ProdsAdmin.vue -->\r\n\r\n<script setup>\r\n\r\nimport { ref, onMounted, watch, computed } from 'vue'\r\nimport { useRouter, useRoute } from 'vue-router'\r\nimport { useRuntimeConfig } from '#imports'\r\n\r\nconst config = useRuntimeConfig()\r\n\r\nimport { defineProps } from 'vue';\r\n\r\nconst props = defineProps({\r\n  prods: {\r\n    type: Array,\r\n    required: true\r\n  },\r\n  currentPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  pageNumbers: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  lastPage: {\r\n    type: Number,\r\n    required: true\r\n  },\r\n  changePage: {\r\n    type: Function,\r\n    required: true\r\n  },\r\n  catid: {\r\n    type: Number,\r\n    required: false\r\n  },\r\n  subid: {\r\n    type: Number,\r\n    required: false\r\n  },\r\n  \r\n})\r\n\r\n\r\n\r\nwatch(() => props.prods, (newProds) => {\r\n  console.log('Items updated now:', newProds);\r\n})\r\n\r\n</script>\r\n<template>\r\n  Admin Products\r\n\t<div class=\"w-full mt-8 mb-8\">\r\n\t  <div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-2\"> \r\n\r\n\t\t  <ProdAdminSingle\r\n\t\t\t  v-for=\"prod in prods\"\r\n\t\t\t  :key=\"prod.id\"\r\n\t\t\t  :prod=\"prod\"\r\n\t\t\t  :config=\"config\"\r\n\t\t\t/>\r\n\r\n\r\n\t  </div>\r\n\t</div>\r\n\r\n\t<div class=\" bg-gray-100 fullwidth margintopbottom8 pagination\"> catid : {{ catid }}\r\n\t\t<button @click=\"changePage(catid,subid,currentPage - 1)\" :disabled=\"currentPage === 1\" \r\n\t\t:class=\"['marginleft5 pager pagerwide', { red: currentPage === 1 , active: currentPage === 1 }]\"> << Previous</button>\r\n\t\t<span v-for=\"page in pageNumbers\" :key=\"page\"  class='marginleft5'>\r\n\t\t<button @click=\"changePage(catid,subid,page)\" \r\n\t\t:class=\"['marginleft5 pager', { red: page === currentPage, active: page === currentPage }]\"\r\n\t\t:disabled=\"page === currentPage\">{{ page }}</button>\r\n\t\t</span>\r\n\t\t<button @click=\"changePage(catid,subid,currentPage + 1)\" :disabled=\"currentPage === lastPage\" \r\n\t\t:class=\"['marginleft5 pager pagerwide', { red: currentPage === lastPage , active: currentPage === lastPage }]\"> >> Next</button>\r\n\t\t<span class='marginleft5'>Page {{ currentPage }} of {{ lastPage }}</span> \r\n\t</div>\r\n\t\t\r\n</template>","import { ref, computed } from 'vue'\r\nimport { useRuntimeConfig, useNuxtApp } from '#imports'\r\n\r\nexport function useProdPagination() {\r\n  const { $api } = useNuxtApp()\r\n  const apiUrl = useRuntimeConfig().public.apiBaseUrl\r\n\r\n  const prods = ref([])\r\n  const currentPage = ref(1)\r\n  const lastPage = ref(1)\r\n  const perPage = ref(8)\r\n  const totalProds = ref(0)\r\n\r\n  const fetchProds = async (catid = '', subid = '',page = 1) => {\r\n\t  \r\n    try {\r\n      // Build the query parameters\r\n      const params = {\r\n        page: page,\r\n        per_page: perPage.value\r\n      }\r\n\r\n      // Include catid if provided\r\n      if (catid) \r\n\t  {\r\n        params.catid = catid\r\n\t\tcatid = catid\r\n      }\r\n\t  else\r\n\t\tcatid =''\r\n\t\r\n\t  if (subid) \r\n\t  {\r\n        params.subid = subid\r\n\t\tsubid = subid\r\n      }\r\n\t  else\r\n\t\tsubid =''\r\n\t  let response = ''\r\n\t  if(catid !=\"\" && subid != \"\")\r\n\t  {\r\n\t\tresponse = await $api.get(`${apiUrl}/admin/prod/view/${catid}/${subid}`, { params })\r\n\t  }\r\n\t  else if(catid !=\"\" && subid == \"\")\r\n\t  {\r\n\t\tresponse = await $api.get(`${apiUrl}/admin/prod/view/${catid}`, { params })  \r\n\t  }\r\n\t  else\r\n\t  {\r\n\t\tresponse = await $api.get(`${apiUrl}/admin/prod/view`, { params })    \r\n\t  }\r\n      \r\n      prods.value = response.data.prods.data\r\n      currentPage.value = response.data.prods.current_page\r\n      lastPage.value = response.data.prods.last_page\r\n      totalProds.value = response.data.prods.total\r\n\t  console.log('prod pagination JS ' + response.data.prods.data)\r\n    } \r\n\tcatch (error) \r\n\t{\r\n      console.error('Error fetching Products:', error.response ? error.response.data : error.message)\r\n    }\r\n  }\r\n\r\n  const changePage = (catid = null,subid = null,page) => {\r\n\t\r\n    if (page > 0 && page <= lastPage.value) {\r\n      fetchProds(catid, subid, page) // Pass catid if needed\r\n    }\r\n  }\r\n\r\n  // Computed property for page numbers\r\n  const pageNumbers = computed(() => {\r\n    let pages = []\r\n    for (let i = 1; i <= lastPage.value; i++) {\r\n      pages.push(i)\r\n    }\r\n    return pages\r\n  })\r\n\r\n  return {\r\n    prods,\r\n    currentPage,\r\n    lastPage,\r\n    perPage,\r\n    totalProds,\r\n    fetchProds,\r\n    changePage,\r\n    pageNumbers,  // Return page numbers\r\n  }\r\n}\r\n"],"version":3}