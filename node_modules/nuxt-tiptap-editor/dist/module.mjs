import { defineNuxtModule, addImports, addComponent } from '@nuxt/kit';

const name = "nuxt-tiptap-editor";
const version = "1.2.1";

const defaultComposables = [
  { name: "useEditor", path: "@tiptap/vue-3" }
];
const defaultNodes = [
  { name: "Node", path: "@tiptap/core" },
  { name: "Blockquote", path: "@tiptap/extension-blockquote" },
  { name: "BulletList", path: "@tiptap/extension-bullet-list" },
  { name: "OrderedList", path: "@tiptap/extension-ordered-list" },
  { name: "ListItem", path: "@tiptap/extension-list-item" },
  { name: "CodeBlock", path: "@tiptap/extension-code-block" },
  { name: "Document", path: "@tiptap/extension-document" },
  { name: "HardBreak", path: "@tiptap/extension-hard-break" },
  { name: "Heading", path: "@tiptap/extension-heading" },
  { name: "HorizontalRule", path: "@tiptap/extension-horizontal-rule" },
  { name: "Paragraph", path: "@tiptap/extension-paragraph" },
  { name: "Text", path: "@tiptap/extension-text" }
];
const defaultMarks = [
  { name: "Mark", path: "@tiptap/core" },
  { name: "Bold", path: "@tiptap/extension-bold" },
  { name: "Code", path: "@tiptap/extension-code" },
  { name: "Italic", path: "@tiptap/extension-italic" },
  { name: "Link", path: "@tiptap/extension-link" },
  { name: "Strike", path: "@tiptap/extension-strike" }
];
const defaultExtensions = [
  { name: "Extension", path: "@tiptap/core" },
  { name: "StarterKit", path: "@tiptap/starter-kit" },
  { name: "BubbleMenu", path: "@tiptap/extension-bubble-menu" },
  { name: "Gapcursor", path: "@tiptap/extension-gapcursor" },
  { name: "FloatingMenu", path: "@tiptap/extension-floating-menu" },
  { name: "Dropcursor", path: "@tiptap/extension-dropcursor" },
  { name: "History", path: "@tiptap/extension-history" }
];
const defaultImports = [
  { name: "Editor", path: "@tiptap/vue-3" },
  ...defaultNodes,
  ...defaultMarks,
  ...defaultExtensions
];
const defaultComponents = [
  { name: "EditorContent", path: "@tiptap/vue-3" },
  { name: "FloatingMenu", path: "@tiptap/vue-3" },
  { name: "BubbleMenu", path: "@tiptap/vue-3" }
];

const lowlightImports = [
  { name: "all", path: "lowlight" },
  { name: "common", path: "lowlight" },
  { name: "createLowlight", path: "lowlight" },
  { name: "CodeBlockLowlight", path: "@tiptap/extension-code-block-lowlight" }
];

const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: "tiptap",
    compatibility: {
      nuxt: "^3.0.0"
    }
  },
  defaults: {
    prefix: "Tiptap",
    lowlight: false
  },
  async setup(options, nuxt) {
    const transpileModules = /* @__PURE__ */ new Set([]);
    let optionalImports = [];
    let optionalComponents = [];
    const customCSS = [];
    for (const obj of defaultComposables) {
      addImports({
        as: obj.name,
        name: obj.name,
        from: obj.path
        // _internal_install: obj.path,
      });
      transpileModules.add(obj.path);
    }
    for (const obj of defaultImports) {
      addImports({
        as: `${options.prefix}${obj.name}`,
        name: obj.name,
        from: obj.path
        // _internal_install: obj.path,
      });
      transpileModules.add(obj.path);
    }
    for (const obj of defaultComponents) {
      addComponent({
        // mode: "client",
        name: `${options.prefix}${obj.name}`,
        export: obj.name,
        filePath: obj.path
        // _internal_install: obj.path,
      });
      transpileModules.add(obj.path);
    }
    if (options.lowlight !== false) {
      optionalImports = [...optionalImports, ...lowlightImports];
      const lldefaultTheme = options.lowlight?.theme || "github-dark";
      const highlightJSVersion = options.lowlight?.highlightJSVersion || "11.9.0";
      const llThemeCSS = `https://unpkg.com/@highlightjs/cdn-assets@${highlightJSVersion}/styles/${lldefaultTheme}.min.css`;
      nuxt.options.app.head.link = [
        ...nuxt.options.app.head.link || [],
        { rel: "stylesheet", href: llThemeCSS }
      ];
    }
    optionalComponents = [...optionalComponents];
    for (const obj of optionalImports) {
      addImports({
        as: `${options.prefix}${obj.name}`,
        name: obj.name,
        from: obj.path
        // _internal_install: obj.path,
      });
      transpileModules.add(obj.path);
    }
    for (const obj of optionalComponents) {
      addComponent({
        name: `${options.prefix}${obj.name}`,
        export: obj.name,
        filePath: obj.path
        // _internal_install: obj.path,
      });
      transpileModules.add(obj.path);
    }
    nuxt.options.build.transpile = [
      ...nuxt.options.build.transpile,
      ...Array.from(transpileModules)
    ];
    nuxt.options.css = [...nuxt.options.css, ...customCSS];
    console.info("Tiptap Editor initialized");
  }
});

export { module as default };
